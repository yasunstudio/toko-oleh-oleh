// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  role      UserRole @default(CUSTOMER)
  password  String
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
  cart      CartItem[]
  
  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products    Product[]
  
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  price       Int      // dalam rupiah (cents)
  stock       Int      @default(0)
  images      ProductImage[] // JSON array of image URLs
  
  slug        String   @unique
  isActive    Boolean  @default(true)
  weight      Int?     // dalam gram
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  
  cartItems   CartItem[]
  orderItems  OrderItem[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}


model CartItem {
  id        String  @id @default(cuid())
  quantity  Int
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  totalAmount     Int         // dalam rupiah
  shippingAddress String      @db.Text
  notes           String?     @db.Text
  
  // Payment info
  paymentProof    String?     // URL to payment proof image
  bankAccount     String?     // Bank account info for payment
  paymentStatus   PaymentStatus @default(PENDING)
  
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  
  orderItems      OrderItem[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Int     // harga saat pembelian
  
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model BankAccount {
  id          String  @id @default(cuid())
  bankName    String
  accountName String
  accountNumber String
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("bank_accounts")
}

model Setting {
  id        String   @id @default(cuid())
  category  String   // 'general', 'payment', 'shipping', 'email', 'security'
  key       String
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([category, key])
  @@map("settings")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  VERIFIED
  REJECTED
}
